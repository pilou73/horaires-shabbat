name: Update Shabbat Schedule

on:
  schedule:
    - cron: '0 22 * * 6'  # Tous les samedis à 22:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-schedule:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v2

      # Étape 2 : Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # Étape 3 : Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pillow pandas pytz openpyxl

      # Étape 4 : Télécharger les fichiers nécessaires
      - name: Download template and fonts
        run: |
          echo "Téléchargement des fichiers resources..."
          curl -L -o resources/template.jpg "${{ secrets.TEMPLATE_URL }}"
          curl -L -o resources/mriamc_0.ttf "${{ secrets.FONT_URL }}"
          curl -L -o resources/ARIALBD_0.TTF "${{ secrets.ARIAL_BOLD_URL }}"
          echo "Téléchargement terminé."

      # Étape 5 : Vérifier le fichier image téléchargé
      - name: Inspect downloaded image
        run: |
          echo "Vérification de l'image téléchargée..."
          file resources/template.jpg
          ls -lh resources/template.jpg
          identify resources/template.jpg || echo "Impossible de lire l'image avec ImageMagick."
        continue-on-error: true  # Continue même si identify échoue pour collecter plus d'informations

      # Étape 6 : Fixer les permissions
      - name: Set permissions for resources
        run: chmod 644 resources/template.jpg

      # Étape 7 : Exécuter le script Python
      - name: Run schedule generator
        run: |
          echo "Exécution du script Python..."
          python horaires_shabbat.py
          echo "Script exécuté avec succès."

      # Étape 8 : Vérifier les fichiers générés
      - name: Check generated files
        run: |
          echo "Diagnostic des fichiers générés :"
          ls -R .
          echo "Fichiers dans le dossier output :"
          ls -l output || echo "Dossier output introuvable ou vide."

      # Étape 9 : Copier le fichier le plus récent dans public/latest-schedule.jpg
      - name: Copy latest schedule
        run: |
          echo "Préparation des fichiers pour publication..."
          mkdir -p public
          FILE_PATH=$(find output -type f -name "*.jpeg" -printf "%T@ %p\n" | sort -n | tail -1 | awk '{print $2}')
          if [ -n "$FILE_PATH" ]; then
            echo "Fichier trouvé : $FILE_PATH"
            cp "$FILE_PATH" "output/latest-schedule.jpg"
            echo "Fichier renommé : output/latest-schedule.jpg"
            cp "output/latest-schedule.jpg" public/latest-schedule.jpg
            echo "Fichier copié dans public/latest-schedule.jpg"
          else
            echo "Erreur : Aucun fichier JPEG trouvé dans le dossier output."
            exit 1
          fi
          cp index.html public/

      # Étape 10 : Publier sur GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
