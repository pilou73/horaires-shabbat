import requests
from datetime import datetime, timedelta
import pytz

HEBCAL_BASE = "https://www.hebcal.com/hebcal"

def fetch_items(start_date: str, end_date: str, geonameid: int = 295530):
    """
    Récupère les items candles, havdalah et roshchodesh depuis Hebcal.
    """
    params = {
        "v": 1,
        "cfg": "json",
        "start": start_date,
        "end": end_date,
        "category": "candles,havdalah,roshchodesh",
        "nx": "on",
        "maj": "on",
        "geonameid": geonameid
    }
    resp = requests.get(HEBCAL_BASE, params=params)
    resp.raise_for_status()
    return resp.json().get("items", [])

def parse_events(items):
    """
    Sépare les events en trois listes : candles, havdalah, roshhodesh.
    Chaque event inclut 'date' (datetime.date) et 'time' ('HH:MM').
    """
    tz = pytz.timezone("Europe/Paris")
    events = {"candles": [], "havdalah": [], "roshchodesh": []}
    for it in items:
        dt = datetime.fromisoformat(it["date"]).astimezone(tz)
        rec = {"date": dt.date(), "time": dt.strftime("%H:%M")}
        events[it["category"]].append(rec)
    return events

def find_preceding_shabbat(rosh_dates, candles):
    """
    Pour chaque date de Rosh Hodesh, trouve la date de candles 
    la plus proche en dessous de celle-ci.
    """
    results = []
    for r in sorted(rosh_dates):
        # filtre candles strictement antérieurs à r
        past = [c for c in candles if c["date"] < r]
        if past:
            last_shabbat = max(past, key=lambda c: c["date"])
            results.append({
                "rosh_hodesh": r,
                "shabbat_before": last_shabbat["date"],
                "candle_time": last_shabbat["time"]
            })
    return results

def main():
    # 1. Détermination de la plage de dates à couvrir
    tz = pytz.timezone("Europe/Paris")
    today = datetime.now(tz).date()
    end = today + timedelta(days=60)  # couvre ~2 mois pour ne rien manquer

    # 2. Appel API
    items = fetch_items(today.isoformat(), end.isoformat())  # :contentReference[oaicite:0]{index=0}

    # 3. Parsing
    ev = parse_events(items)
    # candles et roshchodesh extraits
    candles = ev["candles"]         # bougies du Shabbat :contentReference[oaicite:1]{index=1}
    rosh = [x["date"] for x in ev["roshchodesh"]]  # Rosh Hodesh :contentReference[oaicite:2]{index=2}

    # 4. Calcul du Shabbat précédent chaque Rosh Hodesh
    precedings = find_preceding_shabbat(rosh, candles)

    # 5. Affichage
    for p in precedings:
        print(f"Rosh Hodesh: {p['rosh_hodesh']}  ←  Shabbat précédent: {p['shabbat_before']} à {p['candle_time']}")

if __name__ == "__main__":
    main()
